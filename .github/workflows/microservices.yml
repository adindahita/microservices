name: CI
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
permissions:
  contents: read
  packages: write
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checks-out repository 
    - name: Checkout repo
      uses: actions/checkout@v4

      # 2. Setup PHP untuk linting/test
    - name: Setup PHP
      uses: shivammathur/setup-php@v2 
      with: 
        php-version: '8.2'

    - name:  Validate PHP syntax 
      run: | 
        find . -type f -name "*.php" -exec php -l {} \;

      # 3. Jalankan unit test (jika kamu punya file test) 
    - name: Run PHPUnit (optional) 
      run: | 
        if [ -f "phpunit.xml" ]; then ./vendor/bin/phpunit -- testdox; else echo "No tests found"; fi 
      
      # 4. Build Docker image untuk setiap service
    - name: Build user-service image 
      run: | 
        docker build -t ghcr.io/${{ github.repository }}/user-service:latest ./user-service 
      
    - name: Build message-service image 
      run: | 
        docker build -t ghcr.io/${{ github.repository }}/message-service:latest ./message-service 
      
      # 5. Login ke GitHub Container Registry (GHCR) 
    - name: Login to GitHub Container Registry 
      uses: docker/login-action@v3 
      with: 
        registry: ghcr.io 
        username: ${{ github.actor }} 
        password: ${{ secrets.GITHUB_TOKEN }} 

      # 6. Push Docker images 
    - name: Push Docker images 
      run: | 
        docker push ghcr.io/${{ github.repository }}/user-service:latest 
        docker push ghcr.io/${{ github.repository }}/message-service:latest 

      # 7. (Opsional) Deploy ke Kubernetes 
    - name: Deploy to Kubernetes 
      if: ${{ secrets.KUBECONFIG_CONTENT != '' }} 
      run: | 
        echo "${{ secrets.KUBECONFIG_CONTENT }}" > kubeconfig.yaml 
        mkdir -p ~/.kube 
        mv kubeconfig.yaml ~/.kube/config 
        kubectl apply -f k8s/ 
